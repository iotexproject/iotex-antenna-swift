// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/rpc/rpc.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2018 IoTeX
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

/// To compile the proto, run:
///      protoc -I. -I ./../types --go_out=plugins=grpc:$GOPATH/src *.proto

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Iotexrpc_MessageType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case action // = 1
  case block // = 2
  case consensus // = 3
  case blockRequest // = 4
  case test // = 10001
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .action
    case 2: self = .block
    case 3: self = .consensus
    case 4: self = .blockRequest
    case 10001: self = .test
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .action: return 1
    case .block: return 2
    case .consensus: return 3
    case .blockRequest: return 4
    case .test: return 10001
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Iotexrpc_MessageType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Iotexrpc_MessageType] = [
    .unknown,
    .action,
    .block,
    .consensus,
    .blockRequest,
    .test,
  ]
}

#endif  // swift(>=4.2)

public struct Iotexrpc_BlockSync {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var start: UInt64 = 0

  public var end: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Iotexrpc_BroadcastMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var chainID: UInt32 {
    get {return _storage._chainID}
    set {_uniqueStorage()._chainID = newValue}
  }

  public var msgType: Iotexrpc_MessageType {
    get {return _storage._msgType}
    set {_uniqueStorage()._msgType = newValue}
  }

  public var msgBody: Data {
    get {return _storage._msgBody}
    set {_uniqueStorage()._msgBody = newValue}
  }

  public var peerID: String {
    get {return _storage._peerID}
    set {_uniqueStorage()._peerID = newValue}
  }

  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Iotexrpc_UnicastMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var chainID: UInt32 {
    get {return _storage._chainID}
    set {_uniqueStorage()._chainID = newValue}
  }

  public var addr: String {
    get {return _storage._addr}
    set {_uniqueStorage()._addr = newValue}
  }

  public var msgType: Iotexrpc_MessageType {
    get {return _storage._msgType}
    set {_uniqueStorage()._msgType = newValue}
  }

  public var msgBody: Data {
    get {return _storage._msgBody}
    set {_uniqueStorage()._msgBody = newValue}
  }

  public var peerID: String {
    get {return _storage._peerID}
    set {_uniqueStorage()._peerID = newValue}
  }

  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "iotexrpc"

extension Iotexrpc_MessageType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "ACTION"),
    2: .same(proto: "BLOCK"),
    3: .same(proto: "CONSENSUS"),
    4: .same(proto: "BLOCK_REQUEST"),
    10001: .same(proto: "TEST"),
  ]
}

extension Iotexrpc_BlockSync: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BlockSync"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "start"),
    3: .same(proto: "end"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularUInt64Field(value: &self.start)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.end)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.start != 0 {
      try visitor.visitSingularUInt64Field(value: self.start, fieldNumber: 2)
    }
    if self.end != 0 {
      try visitor.visitSingularUInt64Field(value: self.end, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotexrpc_BlockSync, rhs: Iotexrpc_BlockSync) -> Bool {
    if lhs.start != rhs.start {return false}
    if lhs.end != rhs.end {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotexrpc_BroadcastMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BroadcastMsg"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .standard(proto: "msg_type"),
    3: .standard(proto: "msg_body"),
    4: .standard(proto: "peer_id"),
    5: .same(proto: "timestamp"),
  ]

  fileprivate class _StorageClass {
    var _chainID: UInt32 = 0
    var _msgType: Iotexrpc_MessageType = .unknown
    var _msgBody: Data = SwiftProtobuf.Internal.emptyData
    var _peerID: String = String()
    var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chainID = source._chainID
      _msgType = source._msgType
      _msgBody = source._msgBody
      _peerID = source._peerID
      _timestamp = source._timestamp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._chainID)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._msgType)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._msgBody)
        case 4: try decoder.decodeSingularStringField(value: &_storage._peerID)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._timestamp)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._chainID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._chainID, fieldNumber: 1)
      }
      if _storage._msgType != .unknown {
        try visitor.visitSingularEnumField(value: _storage._msgType, fieldNumber: 2)
      }
      if !_storage._msgBody.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._msgBody, fieldNumber: 3)
      }
      if !_storage._peerID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._peerID, fieldNumber: 4)
      }
      if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotexrpc_BroadcastMsg, rhs: Iotexrpc_BroadcastMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chainID != rhs_storage._chainID {return false}
        if _storage._msgType != rhs_storage._msgType {return false}
        if _storage._msgBody != rhs_storage._msgBody {return false}
        if _storage._peerID != rhs_storage._peerID {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotexrpc_UnicastMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnicastMsg"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .same(proto: "addr"),
    3: .standard(proto: "msg_type"),
    4: .standard(proto: "msg_body"),
    5: .standard(proto: "peer_id"),
    6: .same(proto: "timestamp"),
  ]

  fileprivate class _StorageClass {
    var _chainID: UInt32 = 0
    var _addr: String = String()
    var _msgType: Iotexrpc_MessageType = .unknown
    var _msgBody: Data = SwiftProtobuf.Internal.emptyData
    var _peerID: String = String()
    var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chainID = source._chainID
      _addr = source._addr
      _msgType = source._msgType
      _msgBody = source._msgBody
      _peerID = source._peerID
      _timestamp = source._timestamp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._chainID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._addr)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._msgType)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._msgBody)
        case 5: try decoder.decodeSingularStringField(value: &_storage._peerID)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._timestamp)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._chainID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._chainID, fieldNumber: 1)
      }
      if !_storage._addr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._addr, fieldNumber: 2)
      }
      if _storage._msgType != .unknown {
        try visitor.visitSingularEnumField(value: _storage._msgType, fieldNumber: 3)
      }
      if !_storage._msgBody.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._msgBody, fieldNumber: 4)
      }
      if !_storage._peerID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._peerID, fieldNumber: 5)
      }
      if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotexrpc_UnicastMsg, rhs: Iotexrpc_UnicastMsg) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chainID != rhs_storage._chainID {return false}
        if _storage._addr != rhs_storage._addr {return false}
        if _storage._msgType != rhs_storage._msgType {return false}
        if _storage._msgBody != rhs_storage._msgBody {return false}
        if _storage._peerID != rhs_storage._peerID {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
