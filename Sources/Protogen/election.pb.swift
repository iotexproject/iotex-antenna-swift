// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/types/election.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2019 IoTeX
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

// To compile the proto, run:
//      protoc --go_out=plugins=grpc:$GOPATH/src *.proto

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Iotextypes_ElectionBucket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var voter: Data {
    get {return _storage._voter}
    set {_uniqueStorage()._voter = newValue}
  }

  public var candidate: Data {
    get {return _storage._candidate}
    set {_uniqueStorage()._candidate = newValue}
  }

  public var amount: Data {
    get {return _storage._amount}
    set {_uniqueStorage()._amount = newValue}
  }

  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

  public var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  public var hasDuration: Bool {return _storage._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  public mutating func clearDuration() {_uniqueStorage()._duration = nil}

  public var decay: Bool {
    get {return _storage._decay}
    set {_uniqueStorage()._decay = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "iotextypes"

extension Iotextypes_ElectionBucket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ElectionBucket"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "voter"),
    2: .same(proto: "candidate"),
    3: .same(proto: "amount"),
    4: .same(proto: "startTime"),
    5: .same(proto: "duration"),
    6: .same(proto: "decay"),
  ]

  fileprivate class _StorageClass {
    var _voter: Data = SwiftProtobuf.Internal.emptyData
    var _candidate: Data = SwiftProtobuf.Internal.emptyData
    var _amount: Data = SwiftProtobuf.Internal.emptyData
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _decay: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _voter = source._voter
      _candidate = source._candidate
      _amount = source._amount
      _startTime = source._startTime
      _duration = source._duration
      _decay = source._decay
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._voter)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._candidate)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._amount)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._startTime)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._duration)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._decay)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._voter.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._voter, fieldNumber: 1)
      }
      if !_storage._candidate.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._candidate, fieldNumber: 2)
      }
      if !_storage._amount.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._amount, fieldNumber: 3)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._duration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._decay != false {
        try visitor.visitSingularBoolField(value: _storage._decay, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotextypes_ElectionBucket, rhs: Iotextypes_ElectionBucket) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._voter != rhs_storage._voter {return false}
        if _storage._candidate != rhs_storage._candidate {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._decay != rhs_storage._decay {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
