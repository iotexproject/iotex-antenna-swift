// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/api/read_state.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2020 IoTeX
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

/// To compile the proto, run:
///      protoc -I. -I ./../types --go_out=plugins=grpc:$GOPATH/src *.proto

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Iotexapi_PaginationParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var offset: UInt32 = 0

  public var limit: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Iotexapi_ReadStakingDataMethod {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var method: Iotexapi_ReadStakingDataMethod.Name = .invalid

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Name: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case invalid // = 0
    case buckets // = 1
    case bucketsByVoter // = 2
    case bucketsByCandidate // = 3
    case candidates // = 4
    case candidateByName // = 5
    case bucketsByIndexes // = 6
    case candidateByAddress // = 7
    case totalStakingAmount // = 8
    case bucketsCount // = 9
    case UNRECOGNIZED(Int)

    public init() {
      self = .invalid
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalid
      case 1: self = .buckets
      case 2: self = .bucketsByVoter
      case 3: self = .bucketsByCandidate
      case 4: self = .candidates
      case 5: self = .candidateByName
      case 6: self = .bucketsByIndexes
      case 7: self = .candidateByAddress
      case 8: self = .totalStakingAmount
      case 9: self = .bucketsCount
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .invalid: return 0
      case .buckets: return 1
      case .bucketsByVoter: return 2
      case .bucketsByCandidate: return 3
      case .candidates: return 4
      case .candidateByName: return 5
      case .bucketsByIndexes: return 6
      case .candidateByAddress: return 7
      case .totalStakingAmount: return 8
      case .bucketsCount: return 9
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Iotexapi_ReadStakingDataMethod.Name: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Iotexapi_ReadStakingDataMethod.Name] = [
    .invalid,
    .buckets,
    .bucketsByVoter,
    .bucketsByCandidate,
    .candidates,
    .candidateByName,
    .bucketsByIndexes,
    .candidateByAddress,
    .totalStakingAmount,
    .bucketsCount,
  ]
}

#endif  // swift(>=4.2)

public struct Iotexapi_ReadStakingDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var request: OneOf_Request? {
    get {return _storage._request}
    set {_uniqueStorage()._request = newValue}
  }

  public var buckets: Iotexapi_ReadStakingDataRequest.VoteBuckets {
    get {
      if case .buckets(let v)? = _storage._request {return v}
      return Iotexapi_ReadStakingDataRequest.VoteBuckets()
    }
    set {_uniqueStorage()._request = .buckets(newValue)}
  }

  public var bucketsByVoter: Iotexapi_ReadStakingDataRequest.VoteBucketsByVoter {
    get {
      if case .bucketsByVoter(let v)? = _storage._request {return v}
      return Iotexapi_ReadStakingDataRequest.VoteBucketsByVoter()
    }
    set {_uniqueStorage()._request = .bucketsByVoter(newValue)}
  }

  public var bucketsByCandidate: Iotexapi_ReadStakingDataRequest.VoteBucketsByCandidate {
    get {
      if case .bucketsByCandidate(let v)? = _storage._request {return v}
      return Iotexapi_ReadStakingDataRequest.VoteBucketsByCandidate()
    }
    set {_uniqueStorage()._request = .bucketsByCandidate(newValue)}
  }

  public var candidates: Iotexapi_ReadStakingDataRequest.Candidates {
    get {
      if case .candidates(let v)? = _storage._request {return v}
      return Iotexapi_ReadStakingDataRequest.Candidates()
    }
    set {_uniqueStorage()._request = .candidates(newValue)}
  }

  public var candidateByName: Iotexapi_ReadStakingDataRequest.CandidateByName {
    get {
      if case .candidateByName(let v)? = _storage._request {return v}
      return Iotexapi_ReadStakingDataRequest.CandidateByName()
    }
    set {_uniqueStorage()._request = .candidateByName(newValue)}
  }

  public var bucketsByIndexes: Iotexapi_ReadStakingDataRequest.VoteBucketsByIndexes {
    get {
      if case .bucketsByIndexes(let v)? = _storage._request {return v}
      return Iotexapi_ReadStakingDataRequest.VoteBucketsByIndexes()
    }
    set {_uniqueStorage()._request = .bucketsByIndexes(newValue)}
  }

  public var candidateByAddress: Iotexapi_ReadStakingDataRequest.CandidateByAddress {
    get {
      if case .candidateByAddress(let v)? = _storage._request {return v}
      return Iotexapi_ReadStakingDataRequest.CandidateByAddress()
    }
    set {_uniqueStorage()._request = .candidateByAddress(newValue)}
  }

  public var totalStakingAmount: Iotexapi_ReadStakingDataRequest.TotalStakingAmount {
    get {
      if case .totalStakingAmount(let v)? = _storage._request {return v}
      return Iotexapi_ReadStakingDataRequest.TotalStakingAmount()
    }
    set {_uniqueStorage()._request = .totalStakingAmount(newValue)}
  }

  public var bucketsCount: Iotexapi_ReadStakingDataRequest.BucketsCount {
    get {
      if case .bucketsCount(let v)? = _storage._request {return v}
      return Iotexapi_ReadStakingDataRequest.BucketsCount()
    }
    set {_uniqueStorage()._request = .bucketsCount(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Request: Equatable {
    case buckets(Iotexapi_ReadStakingDataRequest.VoteBuckets)
    case bucketsByVoter(Iotexapi_ReadStakingDataRequest.VoteBucketsByVoter)
    case bucketsByCandidate(Iotexapi_ReadStakingDataRequest.VoteBucketsByCandidate)
    case candidates(Iotexapi_ReadStakingDataRequest.Candidates)
    case candidateByName(Iotexapi_ReadStakingDataRequest.CandidateByName)
    case bucketsByIndexes(Iotexapi_ReadStakingDataRequest.VoteBucketsByIndexes)
    case candidateByAddress(Iotexapi_ReadStakingDataRequest.CandidateByAddress)
    case totalStakingAmount(Iotexapi_ReadStakingDataRequest.TotalStakingAmount)
    case bucketsCount(Iotexapi_ReadStakingDataRequest.BucketsCount)

  #if !swift(>=4.1)
    public static func ==(lhs: Iotexapi_ReadStakingDataRequest.OneOf_Request, rhs: Iotexapi_ReadStakingDataRequest.OneOf_Request) -> Bool {
      switch (lhs, rhs) {
      case (.buckets(let l), .buckets(let r)): return l == r
      case (.bucketsByVoter(let l), .bucketsByVoter(let r)): return l == r
      case (.bucketsByCandidate(let l), .bucketsByCandidate(let r)): return l == r
      case (.candidates(let l), .candidates(let r)): return l == r
      case (.candidateByName(let l), .candidateByName(let r)): return l == r
      case (.bucketsByIndexes(let l), .bucketsByIndexes(let r)): return l == r
      case (.candidateByAddress(let l), .candidateByAddress(let r)): return l == r
      case (.totalStakingAmount(let l), .totalStakingAmount(let r)): return l == r
      case (.bucketsCount(let l), .bucketsCount(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct VoteBuckets {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var pagination: Iotexapi_PaginationParam {
      get {return _storage._pagination ?? Iotexapi_PaginationParam()}
      set {_uniqueStorage()._pagination = newValue}
    }
    /// Returns true if `pagination` has been explicitly set.
    public var hasPagination: Bool {return _storage._pagination != nil}
    /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
    public mutating func clearPagination() {_uniqueStorage()._pagination = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct VoteBucketsByVoter {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var voterAddress: String {
      get {return _storage._voterAddress}
      set {_uniqueStorage()._voterAddress = newValue}
    }

    public var pagination: Iotexapi_PaginationParam {
      get {return _storage._pagination ?? Iotexapi_PaginationParam()}
      set {_uniqueStorage()._pagination = newValue}
    }
    /// Returns true if `pagination` has been explicitly set.
    public var hasPagination: Bool {return _storage._pagination != nil}
    /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
    public mutating func clearPagination() {_uniqueStorage()._pagination = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct VoteBucketsByCandidate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var candName: String {
      get {return _storage._candName}
      set {_uniqueStorage()._candName = newValue}
    }

    public var pagination: Iotexapi_PaginationParam {
      get {return _storage._pagination ?? Iotexapi_PaginationParam()}
      set {_uniqueStorage()._pagination = newValue}
    }
    /// Returns true if `pagination` has been explicitly set.
    public var hasPagination: Bool {return _storage._pagination != nil}
    /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
    public mutating func clearPagination() {_uniqueStorage()._pagination = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct Candidates {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var pagination: Iotexapi_PaginationParam {
      get {return _storage._pagination ?? Iotexapi_PaginationParam()}
      set {_uniqueStorage()._pagination = newValue}
    }
    /// Returns true if `pagination` has been explicitly set.
    public var hasPagination: Bool {return _storage._pagination != nil}
    /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
    public mutating func clearPagination() {_uniqueStorage()._pagination = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct CandidateByName {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var candName: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct VoteBucketsByIndexes {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var index: [UInt64] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct CandidateByAddress {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var ownerAddr: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct TotalStakingAmount {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct BucketsCount {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "iotexapi"

extension Iotexapi_PaginationParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PaginationParam"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "offset"),
    2: .same(proto: "limit"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.offset)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.limit)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.offset != 0 {
      try visitor.visitSingularUInt32Field(value: self.offset, fieldNumber: 1)
    }
    if self.limit != 0 {
      try visitor.visitSingularUInt32Field(value: self.limit, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotexapi_PaginationParam, rhs: Iotexapi_PaginationParam) -> Bool {
    if lhs.offset != rhs.offset {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotexapi_ReadStakingDataMethod: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReadStakingDataMethod"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "method"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.method)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.method != .invalid {
      try visitor.visitSingularEnumField(value: self.method, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotexapi_ReadStakingDataMethod, rhs: Iotexapi_ReadStakingDataMethod) -> Bool {
    if lhs.method != rhs.method {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotexapi_ReadStakingDataMethod.Name: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INVALID"),
    1: .same(proto: "BUCKETS"),
    2: .same(proto: "BUCKETS_BY_VOTER"),
    3: .same(proto: "BUCKETS_BY_CANDIDATE"),
    4: .same(proto: "CANDIDATES"),
    5: .same(proto: "CANDIDATE_BY_NAME"),
    6: .same(proto: "BUCKETS_BY_INDEXES"),
    7: .same(proto: "CANDIDATE_BY_ADDRESS"),
    8: .same(proto: "TOTAL_STAKING_AMOUNT"),
    9: .same(proto: "BUCKETS_COUNT"),
  ]
}

extension Iotexapi_ReadStakingDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReadStakingDataRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "buckets"),
    2: .same(proto: "bucketsByVoter"),
    3: .same(proto: "bucketsByCandidate"),
    4: .same(proto: "candidates"),
    5: .same(proto: "candidateByName"),
    6: .same(proto: "bucketsByIndexes"),
    7: .same(proto: "candidateByAddress"),
    8: .same(proto: "totalStakingAmount"),
    9: .same(proto: "bucketsCount"),
  ]

  fileprivate class _StorageClass {
    var _request: Iotexapi_ReadStakingDataRequest.OneOf_Request?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Iotexapi_ReadStakingDataRequest.VoteBuckets?
          if let current = _storage._request {
            try decoder.handleConflictingOneOf()
            if case .buckets(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._request = .buckets(v)}
        case 2:
          var v: Iotexapi_ReadStakingDataRequest.VoteBucketsByVoter?
          if let current = _storage._request {
            try decoder.handleConflictingOneOf()
            if case .bucketsByVoter(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._request = .bucketsByVoter(v)}
        case 3:
          var v: Iotexapi_ReadStakingDataRequest.VoteBucketsByCandidate?
          if let current = _storage._request {
            try decoder.handleConflictingOneOf()
            if case .bucketsByCandidate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._request = .bucketsByCandidate(v)}
        case 4:
          var v: Iotexapi_ReadStakingDataRequest.Candidates?
          if let current = _storage._request {
            try decoder.handleConflictingOneOf()
            if case .candidates(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._request = .candidates(v)}
        case 5:
          var v: Iotexapi_ReadStakingDataRequest.CandidateByName?
          if let current = _storage._request {
            try decoder.handleConflictingOneOf()
            if case .candidateByName(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._request = .candidateByName(v)}
        case 6:
          var v: Iotexapi_ReadStakingDataRequest.VoteBucketsByIndexes?
          if let current = _storage._request {
            try decoder.handleConflictingOneOf()
            if case .bucketsByIndexes(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._request = .bucketsByIndexes(v)}
        case 7:
          var v: Iotexapi_ReadStakingDataRequest.CandidateByAddress?
          if let current = _storage._request {
            try decoder.handleConflictingOneOf()
            if case .candidateByAddress(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._request = .candidateByAddress(v)}
        case 8:
          var v: Iotexapi_ReadStakingDataRequest.TotalStakingAmount?
          if let current = _storage._request {
            try decoder.handleConflictingOneOf()
            if case .totalStakingAmount(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._request = .totalStakingAmount(v)}
        case 9:
          var v: Iotexapi_ReadStakingDataRequest.BucketsCount?
          if let current = _storage._request {
            try decoder.handleConflictingOneOf()
            if case .bucketsCount(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._request = .bucketsCount(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._request {
      case .buckets(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .bucketsByVoter(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .bucketsByCandidate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .candidates(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .candidateByName(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .bucketsByIndexes(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .candidateByAddress(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .totalStakingAmount(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .bucketsCount(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotexapi_ReadStakingDataRequest, rhs: Iotexapi_ReadStakingDataRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotexapi_ReadStakingDataRequest.VoteBuckets: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Iotexapi_ReadStakingDataRequest.protoMessageName + ".VoteBuckets"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pagination"),
  ]

  fileprivate class _StorageClass {
    var _pagination: Iotexapi_PaginationParam? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _pagination = source._pagination
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._pagination)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._pagination {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotexapi_ReadStakingDataRequest.VoteBuckets, rhs: Iotexapi_ReadStakingDataRequest.VoteBuckets) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._pagination != rhs_storage._pagination {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotexapi_ReadStakingDataRequest.VoteBucketsByVoter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Iotexapi_ReadStakingDataRequest.protoMessageName + ".VoteBucketsByVoter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "voterAddress"),
    2: .same(proto: "pagination"),
  ]

  fileprivate class _StorageClass {
    var _voterAddress: String = String()
    var _pagination: Iotexapi_PaginationParam? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _voterAddress = source._voterAddress
      _pagination = source._pagination
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._voterAddress)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._pagination)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._voterAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._voterAddress, fieldNumber: 1)
      }
      if let v = _storage._pagination {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotexapi_ReadStakingDataRequest.VoteBucketsByVoter, rhs: Iotexapi_ReadStakingDataRequest.VoteBucketsByVoter) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._voterAddress != rhs_storage._voterAddress {return false}
        if _storage._pagination != rhs_storage._pagination {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotexapi_ReadStakingDataRequest.VoteBucketsByCandidate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Iotexapi_ReadStakingDataRequest.protoMessageName + ".VoteBucketsByCandidate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "candName"),
    2: .same(proto: "pagination"),
  ]

  fileprivate class _StorageClass {
    var _candName: String = String()
    var _pagination: Iotexapi_PaginationParam? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _candName = source._candName
      _pagination = source._pagination
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._candName)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._pagination)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._candName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._candName, fieldNumber: 1)
      }
      if let v = _storage._pagination {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotexapi_ReadStakingDataRequest.VoteBucketsByCandidate, rhs: Iotexapi_ReadStakingDataRequest.VoteBucketsByCandidate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._candName != rhs_storage._candName {return false}
        if _storage._pagination != rhs_storage._pagination {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotexapi_ReadStakingDataRequest.Candidates: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Iotexapi_ReadStakingDataRequest.protoMessageName + ".Candidates"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pagination"),
  ]

  fileprivate class _StorageClass {
    var _pagination: Iotexapi_PaginationParam? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _pagination = source._pagination
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._pagination)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._pagination {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotexapi_ReadStakingDataRequest.Candidates, rhs: Iotexapi_ReadStakingDataRequest.Candidates) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._pagination != rhs_storage._pagination {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotexapi_ReadStakingDataRequest.CandidateByName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Iotexapi_ReadStakingDataRequest.protoMessageName + ".CandidateByName"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "candName"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.candName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.candName.isEmpty {
      try visitor.visitSingularStringField(value: self.candName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotexapi_ReadStakingDataRequest.CandidateByName, rhs: Iotexapi_ReadStakingDataRequest.CandidateByName) -> Bool {
    if lhs.candName != rhs.candName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotexapi_ReadStakingDataRequest.VoteBucketsByIndexes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Iotexapi_ReadStakingDataRequest.protoMessageName + ".VoteBucketsByIndexes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt64Field(value: &self.index)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.index.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.index, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotexapi_ReadStakingDataRequest.VoteBucketsByIndexes, rhs: Iotexapi_ReadStakingDataRequest.VoteBucketsByIndexes) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotexapi_ReadStakingDataRequest.CandidateByAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Iotexapi_ReadStakingDataRequest.protoMessageName + ".CandidateByAddress"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ownerAddr"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ownerAddr)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddr, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotexapi_ReadStakingDataRequest.CandidateByAddress, rhs: Iotexapi_ReadStakingDataRequest.CandidateByAddress) -> Bool {
    if lhs.ownerAddr != rhs.ownerAddr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotexapi_ReadStakingDataRequest.TotalStakingAmount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Iotexapi_ReadStakingDataRequest.protoMessageName + ".TotalStakingAmount"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotexapi_ReadStakingDataRequest.TotalStakingAmount, rhs: Iotexapi_ReadStakingDataRequest.TotalStakingAmount) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotexapi_ReadStakingDataRequest.BucketsCount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Iotexapi_ReadStakingDataRequest.protoMessageName + ".BucketsCount"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotexapi_ReadStakingDataRequest.BucketsCount, rhs: Iotexapi_ReadStakingDataRequest.BucketsCount) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
