// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/types/receiptstatus.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2018 IoTeX
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

/// To compile the proto, run:
///      protoc --go_out=plugins=grpc:$GOPATH/src *.proto

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// BELOW ARE DEFINITIONS FOR EVM ERROR CLASSIFICATION IN RECEIPT STATUS 
public enum Iotextypes_ReceiptStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case failure // = 0
  case success // = 1

  ///1xx for EVM ErrorCode
  case errUnknown // = 100
  case errOutOfGas // = 101
  case errCodeStoreOutOfGas // = 102
  case errDepth // = 103
  case errContractAddressCollision // = 104
  case errNoCompatibleInterpreter // = 105
  case errExecutionReverted // = 106
  case errMaxCodeSizeExceeded // = 107
  case errWriteProtection // = 108
  case errInvalidSubroutineEntry // = 109
  case errInsufficientBalance // = 110
  case errInvalidJump // = 111
  case errReturnDataOutOfBounds // = 112
  case errGasUintOverflow // = 113
  case errInvalidRetsub // = 114
  case errReturnStackExceeded // = 115
  case errInvalidCode // = 116

  ///2xx for Staking ErrorCode
  case errLoadAccount // = 200
  case errNotEnoughBalance // = 201
  case errInvalidBucketIndex // = 202
  case errUnauthorizedOperator // = 203
  case errInvalidBucketType // = 204
  case errCandidateNotExist // = 205
  case errReduceDurationBeforeMaturity // = 206
  case errUnstakeBeforeMaturity // = 207
  case errWithdrawBeforeUnstake // = 208
  case errWithdrawBeforeMaturity // = 209
  case errCandidateAlreadyExist // = 210
  case errCandidateConflict // = 211
  case errInvalidBucketAmount // = 212
  case errWriteAccount // = 213
  case errWriteBucket // = 214
  case errWriteCandidate // = 215
  case UNRECOGNIZED(Int)

  public init() {
    self = .failure
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .failure
    case 1: self = .success
    case 100: self = .errUnknown
    case 101: self = .errOutOfGas
    case 102: self = .errCodeStoreOutOfGas
    case 103: self = .errDepth
    case 104: self = .errContractAddressCollision
    case 105: self = .errNoCompatibleInterpreter
    case 106: self = .errExecutionReverted
    case 107: self = .errMaxCodeSizeExceeded
    case 108: self = .errWriteProtection
    case 109: self = .errInvalidSubroutineEntry
    case 110: self = .errInsufficientBalance
    case 111: self = .errInvalidJump
    case 112: self = .errReturnDataOutOfBounds
    case 113: self = .errGasUintOverflow
    case 114: self = .errInvalidRetsub
    case 115: self = .errReturnStackExceeded
    case 116: self = .errInvalidCode
    case 200: self = .errLoadAccount
    case 201: self = .errNotEnoughBalance
    case 202: self = .errInvalidBucketIndex
    case 203: self = .errUnauthorizedOperator
    case 204: self = .errInvalidBucketType
    case 205: self = .errCandidateNotExist
    case 206: self = .errReduceDurationBeforeMaturity
    case 207: self = .errUnstakeBeforeMaturity
    case 208: self = .errWithdrawBeforeUnstake
    case 209: self = .errWithdrawBeforeMaturity
    case 210: self = .errCandidateAlreadyExist
    case 211: self = .errCandidateConflict
    case 212: self = .errInvalidBucketAmount
    case 213: self = .errWriteAccount
    case 214: self = .errWriteBucket
    case 215: self = .errWriteCandidate
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .failure: return 0
    case .success: return 1
    case .errUnknown: return 100
    case .errOutOfGas: return 101
    case .errCodeStoreOutOfGas: return 102
    case .errDepth: return 103
    case .errContractAddressCollision: return 104
    case .errNoCompatibleInterpreter: return 105
    case .errExecutionReverted: return 106
    case .errMaxCodeSizeExceeded: return 107
    case .errWriteProtection: return 108
    case .errInvalidSubroutineEntry: return 109
    case .errInsufficientBalance: return 110
    case .errInvalidJump: return 111
    case .errReturnDataOutOfBounds: return 112
    case .errGasUintOverflow: return 113
    case .errInvalidRetsub: return 114
    case .errReturnStackExceeded: return 115
    case .errInvalidCode: return 116
    case .errLoadAccount: return 200
    case .errNotEnoughBalance: return 201
    case .errInvalidBucketIndex: return 202
    case .errUnauthorizedOperator: return 203
    case .errInvalidBucketType: return 204
    case .errCandidateNotExist: return 205
    case .errReduceDurationBeforeMaturity: return 206
    case .errUnstakeBeforeMaturity: return 207
    case .errWithdrawBeforeUnstake: return 208
    case .errWithdrawBeforeMaturity: return 209
    case .errCandidateAlreadyExist: return 210
    case .errCandidateConflict: return 211
    case .errInvalidBucketAmount: return 212
    case .errWriteAccount: return 213
    case .errWriteBucket: return 214
    case .errWriteCandidate: return 215
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Iotextypes_ReceiptStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Iotextypes_ReceiptStatus] = [
    .failure,
    .success,
    .errUnknown,
    .errOutOfGas,
    .errCodeStoreOutOfGas,
    .errDepth,
    .errContractAddressCollision,
    .errNoCompatibleInterpreter,
    .errExecutionReverted,
    .errMaxCodeSizeExceeded,
    .errWriteProtection,
    .errInvalidSubroutineEntry,
    .errInsufficientBalance,
    .errInvalidJump,
    .errReturnDataOutOfBounds,
    .errGasUintOverflow,
    .errInvalidRetsub,
    .errReturnStackExceeded,
    .errInvalidCode,
    .errLoadAccount,
    .errNotEnoughBalance,
    .errInvalidBucketIndex,
    .errUnauthorizedOperator,
    .errInvalidBucketType,
    .errCandidateNotExist,
    .errReduceDurationBeforeMaturity,
    .errUnstakeBeforeMaturity,
    .errWithdrawBeforeUnstake,
    .errWithdrawBeforeMaturity,
    .errCandidateAlreadyExist,
    .errCandidateConflict,
    .errInvalidBucketAmount,
    .errWriteAccount,
    .errWriteBucket,
    .errWriteCandidate,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Iotextypes_ReceiptStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Failure"),
    1: .same(proto: "Success"),
    100: .same(proto: "ErrUnknown"),
    101: .same(proto: "ErrOutOfGas"),
    102: .same(proto: "ErrCodeStoreOutOfGas"),
    103: .same(proto: "ErrDepth"),
    104: .same(proto: "ErrContractAddressCollision"),
    105: .same(proto: "ErrNoCompatibleInterpreter"),
    106: .same(proto: "ErrExecutionReverted"),
    107: .same(proto: "ErrMaxCodeSizeExceeded"),
    108: .same(proto: "ErrWriteProtection"),
    109: .same(proto: "ErrInvalidSubroutineEntry"),
    110: .same(proto: "ErrInsufficientBalance"),
    111: .same(proto: "ErrInvalidJump"),
    112: .same(proto: "ErrReturnDataOutOfBounds"),
    113: .same(proto: "ErrGasUintOverflow"),
    114: .same(proto: "ErrInvalidRetsub"),
    115: .same(proto: "ErrReturnStackExceeded"),
    116: .same(proto: "ErrInvalidCode"),
    200: .same(proto: "ErrLoadAccount"),
    201: .same(proto: "ErrNotEnoughBalance"),
    202: .same(proto: "ErrInvalidBucketIndex"),
    203: .same(proto: "ErrUnauthorizedOperator"),
    204: .same(proto: "ErrInvalidBucketType"),
    205: .same(proto: "ErrCandidateNotExist"),
    206: .same(proto: "ErrReduceDurationBeforeMaturity"),
    207: .same(proto: "ErrUnstakeBeforeMaturity"),
    208: .same(proto: "ErrWithdrawBeforeUnstake"),
    209: .same(proto: "ErrWithdrawBeforeMaturity"),
    210: .same(proto: "ErrCandidateAlreadyExist"),
    211: .same(proto: "ErrCandidateConflict"),
    212: .same(proto: "ErrInvalidBucketAmount"),
    213: .same(proto: "ErrWriteAccount"),
    214: .same(proto: "ErrWriteBucket"),
    215: .same(proto: "ErrWriteCandidate"),
  ]
}
