// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/types/state_data.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2020 IoTeX
// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no
// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache
// License 2.0 that can be found in the LICENSE file.

/// To compile the proto, run:
///      protoc --go_out=plugins=grpc:$GOPATH/src *.proto

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ProbationCandidateList (slashing #1)
public struct Iotextypes_ProbationCandidateList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var probationList: [Iotextypes_ProbationCandidateList.Info] = []

  public var intensityRate: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Info {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var address: String = String()

    public var count: UInt32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Iotextypes_VoteBucket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var index: UInt64 {
    get {return _storage._index}
    set {_uniqueStorage()._index = newValue}
  }

  public var candidateAddress: String {
    get {return _storage._candidateAddress}
    set {_uniqueStorage()._candidateAddress = newValue}
  }

  public var stakedAmount: String {
    get {return _storage._stakedAmount}
    set {_uniqueStorage()._stakedAmount = newValue}
  }

  public var stakedDuration: UInt32 {
    get {return _storage._stakedDuration}
    set {_uniqueStorage()._stakedDuration = newValue}
  }

  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  public var stakeStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._stakeStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._stakeStartTime = newValue}
  }
  /// Returns true if `stakeStartTime` has been explicitly set.
  public var hasStakeStartTime: Bool {return _storage._stakeStartTime != nil}
  /// Clears the value of `stakeStartTime`. Subsequent reads from it will return its default value.
  public mutating func clearStakeStartTime() {_uniqueStorage()._stakeStartTime = nil}

  public var unstakeStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._unstakeStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._unstakeStartTime = newValue}
  }
  /// Returns true if `unstakeStartTime` has been explicitly set.
  public var hasUnstakeStartTime: Bool {return _storage._unstakeStartTime != nil}
  /// Clears the value of `unstakeStartTime`. Subsequent reads from it will return its default value.
  public mutating func clearUnstakeStartTime() {_uniqueStorage()._unstakeStartTime = nil}

  public var autoStake: Bool {
    get {return _storage._autoStake}
    set {_uniqueStorage()._autoStake = newValue}
  }

  public var owner: String {
    get {return _storage._owner}
    set {_uniqueStorage()._owner = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Iotextypes_VoteBucketList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var buckets: [Iotextypes_VoteBucket] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Iotextypes_CandidateV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ownerAddress: String = String()

  public var operatorAddress: String = String()

  public var rewardAddress: String = String()

  public var name: String = String()

  public var totalWeightedVotes: String = String()

  public var selfStakeBucketIdx: UInt64 = 0

  public var selfStakingTokens: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Iotextypes_CandidateListV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var candidates: [Iotextypes_CandidateV2] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "iotextypes"

extension Iotextypes_ProbationCandidateList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProbationCandidateList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "probationList"),
    2: .same(proto: "intensityRate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.probationList)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.intensityRate)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.probationList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.probationList, fieldNumber: 1)
    }
    if self.intensityRate != 0 {
      try visitor.visitSingularUInt32Field(value: self.intensityRate, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotextypes_ProbationCandidateList, rhs: Iotextypes_ProbationCandidateList) -> Bool {
    if lhs.probationList != rhs.probationList {return false}
    if lhs.intensityRate != rhs.intensityRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotextypes_ProbationCandidateList.Info: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Iotextypes_ProbationCandidateList.protoMessageName + ".Info"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.address)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.count)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotextypes_ProbationCandidateList.Info, rhs: Iotextypes_ProbationCandidateList.Info) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotextypes_VoteBucket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VoteBucket"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "candidateAddress"),
    3: .same(proto: "stakedAmount"),
    4: .same(proto: "stakedDuration"),
    5: .same(proto: "createTime"),
    6: .same(proto: "stakeStartTime"),
    7: .same(proto: "unstakeStartTime"),
    8: .same(proto: "autoStake"),
    9: .same(proto: "owner"),
  ]

  fileprivate class _StorageClass {
    var _index: UInt64 = 0
    var _candidateAddress: String = String()
    var _stakedAmount: String = String()
    var _stakedDuration: UInt32 = 0
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _stakeStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _unstakeStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _autoStake: Bool = false
    var _owner: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _index = source._index
      _candidateAddress = source._candidateAddress
      _stakedAmount = source._stakedAmount
      _stakedDuration = source._stakedDuration
      _createTime = source._createTime
      _stakeStartTime = source._stakeStartTime
      _unstakeStartTime = source._unstakeStartTime
      _autoStake = source._autoStake
      _owner = source._owner
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._index)
        case 2: try decoder.decodeSingularStringField(value: &_storage._candidateAddress)
        case 3: try decoder.decodeSingularStringField(value: &_storage._stakedAmount)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._stakedDuration)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._createTime)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._stakeStartTime)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._unstakeStartTime)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._autoStake)
        case 9: try decoder.decodeSingularStringField(value: &_storage._owner)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._index != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._index, fieldNumber: 1)
      }
      if !_storage._candidateAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._candidateAddress, fieldNumber: 2)
      }
      if !_storage._stakedAmount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stakedAmount, fieldNumber: 3)
      }
      if _storage._stakedDuration != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._stakedDuration, fieldNumber: 4)
      }
      if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._stakeStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._unstakeStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _storage._autoStake != false {
        try visitor.visitSingularBoolField(value: _storage._autoStake, fieldNumber: 8)
      }
      if !_storage._owner.isEmpty {
        try visitor.visitSingularStringField(value: _storage._owner, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotextypes_VoteBucket, rhs: Iotextypes_VoteBucket) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._index != rhs_storage._index {return false}
        if _storage._candidateAddress != rhs_storage._candidateAddress {return false}
        if _storage._stakedAmount != rhs_storage._stakedAmount {return false}
        if _storage._stakedDuration != rhs_storage._stakedDuration {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._stakeStartTime != rhs_storage._stakeStartTime {return false}
        if _storage._unstakeStartTime != rhs_storage._unstakeStartTime {return false}
        if _storage._autoStake != rhs_storage._autoStake {return false}
        if _storage._owner != rhs_storage._owner {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotextypes_VoteBucketList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VoteBucketList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "buckets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.buckets)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.buckets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.buckets, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotextypes_VoteBucketList, rhs: Iotextypes_VoteBucketList) -> Bool {
    if lhs.buckets != rhs.buckets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotextypes_CandidateV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CandidateV2"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ownerAddress"),
    2: .same(proto: "operatorAddress"),
    3: .same(proto: "rewardAddress"),
    4: .same(proto: "name"),
    5: .same(proto: "totalWeightedVotes"),
    6: .same(proto: "selfStakeBucketIdx"),
    7: .same(proto: "selfStakingTokens"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ownerAddress)
      case 2: try decoder.decodeSingularStringField(value: &self.operatorAddress)
      case 3: try decoder.decodeSingularStringField(value: &self.rewardAddress)
      case 4: try decoder.decodeSingularStringField(value: &self.name)
      case 5: try decoder.decodeSingularStringField(value: &self.totalWeightedVotes)
      case 6: try decoder.decodeSingularUInt64Field(value: &self.selfStakeBucketIdx)
      case 7: try decoder.decodeSingularStringField(value: &self.selfStakingTokens)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if !self.operatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.operatorAddress, fieldNumber: 2)
    }
    if !self.rewardAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.rewardAddress, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    if !self.totalWeightedVotes.isEmpty {
      try visitor.visitSingularStringField(value: self.totalWeightedVotes, fieldNumber: 5)
    }
    if self.selfStakeBucketIdx != 0 {
      try visitor.visitSingularUInt64Field(value: self.selfStakeBucketIdx, fieldNumber: 6)
    }
    if !self.selfStakingTokens.isEmpty {
      try visitor.visitSingularStringField(value: self.selfStakingTokens, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotextypes_CandidateV2, rhs: Iotextypes_CandidateV2) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.operatorAddress != rhs.operatorAddress {return false}
    if lhs.rewardAddress != rhs.rewardAddress {return false}
    if lhs.name != rhs.name {return false}
    if lhs.totalWeightedVotes != rhs.totalWeightedVotes {return false}
    if lhs.selfStakeBucketIdx != rhs.selfStakeBucketIdx {return false}
    if lhs.selfStakingTokens != rhs.selfStakingTokens {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iotextypes_CandidateListV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CandidateListV2"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "candidates"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.candidates)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.candidates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.candidates, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Iotextypes_CandidateListV2, rhs: Iotextypes_CandidateListV2) -> Bool {
    if lhs.candidates != rhs.candidates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
